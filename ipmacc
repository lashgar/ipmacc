#!/bin/bash

VERSION=1.2.0b
function usage()
{
    echo "    IPMACC version $VERSION, Copyright (C) 2015 Ahmad Lashgar"
    echo "    IPMACC comes with ABSOLUTELY NO WARRANTY; for details see LICENSE."
    echo " "
    echo "usage: ipmacc <input file> <compile flags> "
    echo " <input file> is single c/c++ file with OpenACC notation."
    echo " <compile flags> are compile flags supported by g++ "
    echo "   (or nvcc if the target accelerator is CUDA)."
    echo ""
    echo "other useful inlines:"
    echo " ipmacc --help"
    echo "   see this message."
    echo " ipmacc --list-backends"
    echo "   list backends which IPMACC is compiled for."
    echo " ipmacc --list-devices OCL"
    echo "   list available OpenCL devices."
    echo " ipmacc --list-devices CUDA"
    echo "   list available CUDA devices."
    echo " ipmacc --cflags"
    echo "   get compile flags for ipmacc OpenACC headers."
    echo " ipmacc --ldflags"
    echo "   get link flags for linking to ipmacc runtime library."
    echo " ipmacc --enable <optimizations>"
    echo "   enables particular optimizations. available are: readonlycache"
    echo " ipmacc --perforation-config <fix-type>"
    echo "   enables fix for perforation. available are: fixcpy,fixavg,fixwav,fixmin,fixmax"
}

function version()
{
    echo "IPMACC $VERSION (last update: `stat -c %y "$1" | awk '{print $1}'`)"
    #echo "This tool is originally developed by Ahmad Lashgar and Alireza Majidi at IPM."
}

# ENVIRONMENT SETUP
# 1. find the ipmacc root
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
path=$DIR/
#t=`pwd`/$0
#path=${t%/*}
#echo "IPMACC is located at $path"

# 2. set python path for openacc parser and pycparser
export PYTHONPATH=$path/:$path/build/py/:$PYTHONPATH
# activate python path for lxml compatibility
source $path/build/venv/bin/activate
# set python executable
export PYTHON_EXECUTABLE=`which python2`
if [[ "$PYTHON_EXECUTABLE" == "" ]] ; then
  echo "error: unable to locate python2 from virtualenv"
  exit 255
fi
# put libxslt libxml on LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$IPMACCROOT/build/lib/:$LD_LIBRARY_PATH

# 3. Compile/Link flags for CUDA/OpenCL destination
export CFLAG="-I$path/include "
export LDFLAG="-L$path/build/runtime-lib -lopenacc "
if [ "$CUDASUPPORT" == "1" ] ; then
 export CFLAG="$CFLAG -I$CUDAHOME/include/ "
 export LDFLAG="$LDFLAG -L$CUDAHOME/lib64/ -lcudart "
fi
if [ "$OPENCLSUPPORT" == "1" ] ; then
 export CFLAG="$CFLAG -I$OPENCLINC/ "
 export LDFLAG="$LDFLAG -L$OPENCLLIB/ -lOpenCL "
fi
if [ "$ISPCSUPPORT" == "1" ] ; then
 export CFLAG="$CFLAG "
 export LDFLAG="$LDFLAG $IPMACCROOT/src/tasksys.o "
fi
if [ "$VERBOSE" == "1" ] ; then
 echo 'LDFLAG: '$LDFLAG
 echo ' CFLAG: '$CFLAG
fi

# GENERATE SOFTLINK IN CASE THE COMPILATION WAS NOT SUCCESSFUL
rm $path/parser/utils_clause.py -f
ln -s $path/src/utils_clause.py $path/parser/

# 4. find the arguments and pass proper args to nvcc directly
ARGS=(${@})
NARG=${#ARGS[@]}
#echo $ARGS $NARG
NVCCARGS=
OPTIMIZATION= #optimization swtiches
PERFORATION="non" #perforation switch
COMPILEONLY=0
TARGETOBJ=

LISTANDEXIT=
LISTANDEXITPAR=
for (( i = 0 ; i < $NARG ; i++ )) ; do
    # check for pending args
    if [ "$pendingta" == "1" ] ; then
        ta=${ARGS[i]}
        pendingta="0"
        continue
    elif [ "$pendingaccfile" == "1" ] ; then
        INFILE=${ARGS[i]}
        pendingaccfile="0"
        continue
    elif [ "$pendingoptimization" == "1" ] ; then
        OPTIMIZATION=${ARGS[i]}
        pendingoptimization="0"
        continue
    elif [ "$pendingperforation" == "1" ] ; then
        PERFORATION=${ARGS[i]}
        pendingperforation="0"
        continue
    elif [ "$pendingobject" == "1" ] ; then
        TARGETOBJ=${ARGS[i]}
        pendingobject="0"
        continue
    fi

    # parse new arg
    if [ "${ARGS[i]}" == "--cflags" ] ; then
        LISTANDEXIT=cflags
    elif [ "${ARGS[i]}" == "--ldflags" ] ; then
        LISTANDEXIT=ldflags
    elif [ "${ARGS[i]}" == "-h" ] || [ "${ARGS[i]}" == "--help" ] ; then
        LISTANDEXIT=help
    elif [ "${ARGS[i]}" == "--list-devices" ] ; then
        LISTANDEXIT=devices
        LISTANDEXITPAR=${ARGS[i+1]}
    elif [ "${ARGS[i]}" == "--list-backends" ] ; then
        LISTANDEXIT=backends
    elif [ "${ARGS[i]}" == "--version" ] ; then
        LISTANDEXIT=version
    elif [ "${ARGS[i]}" == "--ta" ] ; then
        pendingta="1"
    elif [ "${ARGS[i]}" == "--accfile" ] ; then
        pendingaccfile="1"
    elif [ "${ARGS[i]}" == "--enable" ] ; then
        pendingoptimization="1"
    elif [ "${ARGS[i]}" == "--perforation-config" ] ; then
        pendingperforation="1"
    elif [ "${ARGS[i]}" == "-o" ] ; then
        pendingobject="1"
    elif [ "$i" != "0" ] ; then
        # append this arg
        NVCCARGS="${NVCCARGS} ${ARGS[i]}"
        if [ "${ARGS[i]}" == "-c" ] ; then
            COMPILEONLY=1
        fi
    fi
done;

# 5. destination of code generation 
TARGETARCH=
if [ "$ta" == "nvcuda" ] ; then
    if [ "$CUDASUPPORT" != "1" ] ; then
        echo 'warning: targeting for nvcuda while the environemnt is not setup for CUDA'
    fi
    TARGETARCH="nvcuda"
elif [ "$ta" == "nvopencl" ] ; then
    TARGETARCH="nvopencl"
    if [ "$OPENCLSUPPORT" != "1" ] ; then
        echo 'warning: targeting for nvopencl while the environemnt is not setup for OpenCL'
    fi
elif [ "$ta" == "intelispc" ] ; then
    TARGETARCH="intelispc"
    if [ "$ISPCSUPPORT" != "1" ] ; then
        echo 'warning: targeting for intelispc while the environemnt is not setup for ISPC'
    fi
elif [ "$ta" == "" ] ; then
    #fallback
    if [ "$CUDASUPPORT" == "1" ] ; then
        if [ "$VERBOSE" == "1" ] ; then
         echo "target unspecified: falling back to CUDA target"
        fi
        TARGETARCH="nvcuda"
    elif [ "$OPENCLSUPPORT" == "1" ] ; then
        if [ "$VERBOSE" == "1" ] ; then
         echo "target unspecified: falling back to OpenCL target"
        fi
        TARGETARCH="nvopencl"
    elif [ "$ISPCSUPPORT" == "1" ] ; then
        if [ "$VERBOSE" == "1" ] ; then
         echo "target unspecified: falling back to ISPC target"
        fi
        TARGETARCH="intelispc"
    else
        echo 'fatal error! unable to find an enabled backend. enable CUDASUPPORT, OPENCLSUPPORT, or ISPCSUPPORT in setup_environment file.'
        exit
    fi
else
    echo 'unknown target: '$ta
    echo 'aborting()'
    exit 
fi

# Skip if this is only for listing.
if [ "$LISTANDEXIT" != "" ] ; then
    if [ "$LISTANDEXIT" == "cflags" ] ; then
        if [ $TARGETARCH == "nvcuda" ] ; then
            echo -D__NVCUDA__ $CFLAG
        elif [ $TARGETARCH == "nvopencl" ] ; then
            echo -D__NVOPENCL__ $CFLAG
        elif [ $TARGETARCH == "intelispc" ] ; then
            echo -D__INTELISPC__ $CFLAG
        fi
        exit 1
    elif [ "$LISTANDEXIT" == "ldflags" ] ; then
        echo $LDFLAG
    elif [ "$LISTANDEXIT" == "help" ] ; then
        usage
        exit 1
    elif [ "$LISTANDEXIT" == "devices" ] ; then
        $path/src/listdevices $LISTANDEXITPAR
    elif [ "$LISTANDEXIT" == "backends" ] ; then
        if [ "$CUDASUPPORT" == "1" ] ; then
            echo 'CUDA backend   [Enabled ]'
        else
            echo 'CUDA backend   [Disabled]'
        fi
        if [ "$OPENCLSUPPORT" == "1" ] ; then
            echo 'OpenCL backend [Enabled ]'
        else
            echo 'OpenCL backend [Disabled]'
        fi
        if [ "$ISPCSUPPORT" == "1" ] ; then
            echo 'ISPC backend   [Enabled ]'
        else
            echo 'ISPC backend   [Disabled]'
        fi
    elif [ "$LISTANDEXIT" == "version" ] ; then
        version $path/codegen.py
    fi
    exit 0
fi

# File naming
if [ "$INFILE" == "" ] ; then
    INFILE=$1
fi
if [ "$1" == "" ] ; then
    usage
    exit 1
elif [ ! -f "$INFILE" ] ; then
    echo "No such file: $INFILE"
    usage
    exit 1
fi



# Path to nvcc
NVCC=${CUDAHOME}/bin/nvcc
if [ ! -f "$NVCC" ] && [ "$TARGETARCH" == "nvcuda" ] ; then
    echo "unable to locate nvcc"
    echo "potentially, environment variables are not properly set!"
    echo "check the README file for installation and setup"
    echo "exiting with failure"
    exit 1
fi
# Path to ispc
ISPC=${ISPCHOME}/ispc
if [ ! -f "$ISPC" ] && [ "$TARGETARCH" == "intelispc" ] ; then
    echo "unable to locate ispc"
    echo "potentially, environment variables are not properly set!"
    echo "check the README file for installation and setup"
    echo "exiting with failure"
    exit 1
fi

# System C/C++ Compiler
CC=gcc
CXX=g++

# DETERMINE OUTPUT NAME
if [ "$TARGETARCH" == "nvcuda" ] ; then
    OUTPUT=`echo "$INFILE " | sed -r 's/(\.cu\ )/_ipmacc\.cu/g' | sed -r 's/(\.[cC]\ )/_ipmacc\.cu/g' | sed -r 's/(\.cpp\ )/_ipmacc\.cu/g' `
else 
    OUTPUT=`echo "$INFILE " | sed -r 's/(\.[cC]\ )/_ipmacc\.c/g' | sed -r 's/(\.cpp\ )/_ipmacc\.cpp/g' `
    ISPCKERNEL=`echo "$INFILE " | sed -r 's/(\.[cC]\ )/_ipmacc\.ispc/g' | sed -r 's/(\.cpp\ )/_ipmacc\.ispc/g' `
    ISPCKERNELOBJ=`echo "$INFILE " | sed -r 's/(\.[cC]\ )/_ipmacc\.o/g' | sed -r 's/(\.cpp\ )/_ipmacc\.o/g' `
fi

# RUN IPMACC
# 1. parse and generate fully-bracketed C/C++ code
$path/build/bin/uncrustify -c $path/build/bin/avalon.cfg -l C -f $INFILE -o $INFILE.uncrustify
if [ "$?" != "0" ] ; then
    exit 255
fi

# 2. running scanner to generate intermediate xml (file is stored under $PWD/__inter.xml)
$PYTHON_EXECUTABLE $path/src/scanner.py --file $INFILE.uncrustify -k -q
if [ "$?" != "0" ] ; then
    exit 255
fi
rm $INFILE.uncrustify -f

# 3. run parser to check the validity under xml
$path/parser/parser.sh __inter.xml

if [ "$?" == "0" ] ; then
    # 4. OpenACC to CUDA code generation
    if [ "$VERBOSE" == "1" ] ; then
     echo -en "\n========CODE GENERATOR LOGS=========\n"
    fi
    $PYTHON_EXECUTABLE $path/src/codegen.py --file $OUTPUT --targetarch $TARGETARCH --args "$NVCCARGS" --opt "$OPTIMIZATION" --perforation-config "$PERFORATION"
    if [ "$?" == "0" ] ; then
        if [ $TARGETARCH == "nvcuda" ] ; then
            # 5.a Call NVCC to compile the CUDA
            if [ "$COMPILEONLY" == "1" ] ; then
             if [ "$TARGETOBJ" != "" ] ; then
              $NVCC -w $CFLAG $NVCCARGS $OUTPUT -D__NVCUDA__ -o $TARGETOBJ
             else
              $NVCC -w $CFLAG $NVCCARGS $OUTPUT -D__NVCUDA__ 
             fi
            else
             if [ "$TARGETOBJ" != "" ] ; then
              $NVCC -w $CFLAG $LDFLAG $NVCCARGS $OUTPUT -D__NVCUDA__ -o $TARGETOBJ
             else
              $NVCC -w $CFLAG $LDFLAG $NVCCARGS $OUTPUT -D__NVCUDA__ 
             fi
            fi
            if [ "$?" != "0" ] ; then
                echo "[failed] $NVCC failed to generate the binary"
                exit 255
            fi
        elif [ $TARGETARCH == "nvopencl" ] ; then
            # 5.b Call CC to compile the OpenCL
            if [ "$COMPILEONLY" == "1" ] ; then
             if [ "$TARGETOBJ" != "" ] ; then
              $CXX $CFLAG $NVCCARGS $OUTPUT -D__NVOPENCL__ -o $TARGETOBJ
             else
              $CXX $CFLAG $NVCCARGS $OUTPUT -D__NVOPENCL__ 
             fi
            else
             if [ "$TARGETOBJ" != "" ] ; then
              $CXX $CFLAG $LDFLAG $NVCCARGS $OUTPUT -D__NVOPENCL__ -o $TARGETOBJ
             else
              $CXX $CFLAG $LDFLAG $NVCCARGS $OUTPUT -D__NVOPENCL__ 
             fi
            fi
            # $CXX $NVCCARGS $OUTPUT -D__NVOPENCL__ $CFLAG $LDFLAG 
            if [ "$?" != "0" ] ; then
                echo "[failed] $CXX failed to generate the binary"
                exit 255
            fi
        elif [ "$TARGETARCH" == "intelispc" ] ; then
            # 5.c.a Call ISPC to compile the ISPC kernel
            $ISPC $ISPCFLAG $ISPCKERNEL -D__INTELISPC__ -o $ISPCKERNELOBJ
            if [ "$?" != "0" ] ; then
                echo "[failed] ispc failed to generate the object code"
                exit 255
            fi
            # 5.c.b CC to compile ISPC Task API
            if [ -f $IPMACCROOT/src/tasksys.o ] ; then
                make -C $IPMACCROOT/src/ tasksys.o
            fi
            # 5.c.c CC to compile the compile host and link
            if [ "$VERBOSE" == "1" ] ; then
             echo -en "\n=============$CXX LOGS==============\n"
             echo -en "$CXX $OUTPUT -D__INTELISPC__ $ISPCKERNELOBJ $NVCCARGS $CFLAG $LDFLAG "
            fi
            if [ "$COMPILEONLY" == "1" ]; then
             $CXX $OUTPUT -D__INTELISPC__ $ISPCKERNELOBJ $NVCCARGS $CFLAG $LDFLAG -o /tmp/launcher.o
             if [ "$TARGETOBJ" != "" ] ; then 
              ld -r /tmp/launcher.o $ISPCKERNELOBJ -o $TARGETOBJ
             fi
            else
             if [ "$TARGETOBJ" != "" ] ; then 
              $CXX -o $TARGETOBJ $OUTPUT -D__INTELISPC__ $ISPCKERNELOBJ $NVCCARGS $CFLAG $LDFLAG 
             else
              $CXX $OUTPUT -D__INTELISPC__ $ISPCKERNELOBJ $NVCCARGS $CFLAG $LDFLAG 
             fi
            fi
            #$CXX $CFLAG $LDFLAG $OUTPUT -D__INTELISPC__ $ISPCKERNELOBJ $NVCCARGS
            if [ "$?" != "0" ] ; then
                echo "[failed] $CXX failed to generate the binary"
                exit 255
            fi
        fi
    else
        # code generator crashed
        rm $OUTPUT~ -f #cleaning GNU indent
        exit -1
    fi
    rm $OUTPUT~ -f #cleaning GNU indent
fi

rm yacctab.py lextab.py -f
