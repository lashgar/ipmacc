==================
TODO:
- Support all clauses of kernel, data, and loop directive
- Fully support use of non-standard types in C/C++ (template, class, union, enum, typedef, and struct)
- Support C++ features (function template, class template, struct operator overload)
- Support 'kernels loop' directive (autodetection of parallelisim, without independent clause)
- Improve pragmadecomposer parser to detect malformed reduction/private
- Support 2D arrays
- Support parallel directive
- Support entire API
- BUGFIX: codegen fails to find the type/size upon passing struct element to data clause
- Support dynamic shared memory size (for smc and cache clause)
- BUGFIX: two terminating condition in the for loop may lead to XML crash.
- BUGFIX: typedef struct on ISPC backend is broken.
- OpenACC syntax parser may disallow valid cases. Fix the parser state machine. (related file: parser/oaccparser.y)
- Add support for parallel directive
- Add `name' clause to kernels directive, allowing easy debugging.
- IMPROVEMENT: __smc_select_* procedures must be optimized. nvcc alone cannot highly optimize the code. these are generated in case of `cache' directive.
- An issue with atomic pragmas on OpenCL; adding '#pragma OPENCL EXTENSION cl_khr_int64_base_atomics : enable' should be added to OpenCL kernels.
- Within the kernels region, if a nested procedure uses a global variable, the variable is not copied in/out.
- For ISPC backend, pointers passed as arguments of functions called in the kernels region should be identified as `uniform' or `varying'. Currently, we generate multiple functions with the same declaration body to cover all combination of pointers. ispc compiler picks the proper one at the compile time. A similar issue exist in OpenCL < 2.0 backend, private and global pointers. We expect OpenCL >= 2.0 implementations resolve this.
- Partial copy.
- Compile time option of write-through cache (default is write-back).
- Free memory on device when data is copied out (test-case/test/reduction.c)
- Optimize OpenCL compile-time constants like:
    sprintf(buildOptions, “-DEXPONENT=%u”, exponent_val);
    clBuildProgram(program, <...>, buildOptions, <...>);
- Apply OpenCL optimization available here: https://software.intel.com/sites/landingpage/opencl/optimization-guide/
- private clause to support subarray
- BUGFIX: recursive functions cause crash during compiler.
- Using user-defined datatypes in the functions called in the kernel region generates error (e.g. nbody)
- Move to CMake build system
- Add UnitTesting
- Add HIP backend

CHANGES:
- Replacing pycparser XML generator with srcML generator (delivering faster, plain, and detailed parser)
- Support serial loops
- Fully-support dynamic allocation
- Detect pragma region without full-bracketing
- Detecting the region of `for` loop with nested one-statement if-else
- Fixing the bug in copy statement detection (parenteces are not allowed by now)
- Prepare a comprehensive ipmacc accelerator query (like clinfo)
- Replace all `define` micro to prevent clBuiltProgram failure
- Support OpenCL generators
- Function call inside the region
- Improve compilation speed
- Support for user-defined data types
- Launch nested loops over multi-dimensional thread-blocks and kernel grids
- Implementing '#pragma acc enter data'
- Implementing '#pragma acc exit data'
- [Apr 21, 2015] Supporting NVIDIA Kepler's Read Only Cache. Enabled by '--enable readonlycache' compiler flag.
- [May 16, 2015] early support for `atomic capture` added. Sample added in test-case/atomictest.c. For cuda-backend, pass `arch=sm_13` flag to ipmacc. mgBench added to test-case/mgBench/.
- [September 2015] Support Intel ISPC backend.
- BUGFIX: '\n' character in for statement cause XML crash.
- [Januray 2016] Nested type declaration supported on CUDA, OpenCL, and ISPC.
- [September 2016] cache directive fully implemented.
