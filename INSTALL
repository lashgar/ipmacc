====================
The compiler should work on most Linux systems, initially developed under CentOS 6.2 64-bit:
- gcc/g++ : 4.4.6
- python  : 2.6.6

====================
Pre-requistics:

Requirements:
- python python-lxml
- GNU cpp bison
    on RedHat-like systems:
        $ yum install bison
    on ubuntu-like systems:
        $ sudo apt-get install bison
    on SUSE-like systems:
        $ zypper install bison
- In case of CUDA backend, CUDA Toolkit (>=4.2)
    Download and install from NVIDIA website: http://developer.nvidia.com/cuda-toolkit
- In case of OpenCL backend, OpenCL platform (>=1.0)
- GCC/G++ 4.4 or later
- For srcML:
    on RedHat-like systems:
        $ yum install libxml2 libxml2-devel antlr antlr-devel libarchive-devel libarchive libxslt libxslt-devel boost boost-devel java
    on ubuntu-like systems:
        $ sudo apt-get install libxml2 libxml2-dev antlr libantlr-dev libarchive-dev libxslt-dev libboost-dev
		on 18.04 LTS: sudo apt-get install lib32ncurses5 lib32z1
		on older: sudo apt-get install ia32-libs
    on SUSE-like systems:
        $ zypper install libxml2 libxml2-devel antlr antlr-devel libarchive-devel libarchive libxslt libxslt-devel

Optional:
- GNU indent (disbled by default)
    indenting the CUDA/OpenCL target code to improve readablity. This can be enabled by setting ENABLE_INDENT=True in early lines of `codegen.py` file.

====================
Installation:
Step 1:
    Modify the 'setup_environment' file in the ipmacc root directory and set variables properly according to the information given there. Then, source this file to have proper environment in the current bash:
    $ source ./setup_environment
    
    Notice that these variables are needed everytime you use IPMACC to compile applications or run the generated binaries. You may prefer to put the above command in the home bash file (e.g. ~/.bashrc).
    
    If the environment is setup properly, ipmacc should be available on the PATH: 
    $ which ipmacc

Step 2:
    Start compilation by:
    $ make
    
    may see several warnings but there shouldn't be any error! Compilation successfully terminates with the following prompt:
    ~ compiling OpenACC API .. done

Step 3:
    should be able to see ipmacc on the command-line:
    $ ipmacc --version
    IPMACC 0.7.5b
    Also get available accelerators using:
    $ ipmacc --list-devices CUDA
    or
    $ ipmacc --list-devices OCL 
    There shouldn't be any error up to this point.

Step 4:
    Compile and run samples in test-case/ directory:
    [lashgar@sysadm2 test-case]$ ipmacc vectorAdd.c -o vectorAdd
            warning: Storing the translated code in <vectorAdd_ipmacc.cu> (target: <nvcuda>)
    nvcc warning : The 'compute_10' and 'sm_10' architectures are deprecated, and may be removed in a future release.
    [lashgar@sysadm2 test-case]$ ./vectorAdd
    Calculation on GPU ...  150.0000 ms
    Calculation on GPU ...  10.0000 ms
    Calculation on GPU ...  0.0000 ms
    Calculation on CPU ...  0.0000 ms
    OpenACC vectoradd test was successful!
    [lashgar@sysadm2 test-case]$ ipmacc vectorAdd.c -o vectorAdd -arch=sm_35
            warning: Storing the translated code in <vectorAdd_ipmacc.cu> (target: <nvcuda>)
    [lashgar@sysadm2 test-case]$ ./vectorAdd
    Calculation on GPU ...  140.0000 ms
    Calculation on GPU ...  0.0000 ms
    Calculation on GPU ...  0.0000 ms
    Calculation on CPU ...  0.0000 ms
    OpenACC vectoradd test was successful!
    [lashgar@sysadm2 test-case]$ 

Step 5:
    Verify correctness of ipmacc under latest features (software-managed cache and two-dimensional grid/thread block) by:
    [lashgar@sysadm2 ipmacc]$ cd test-case/rodinia/smc/hotspot/
    [lashgar@sysadm2 ipmacc]$ cat README
    [lashgar@sysadm2 hotspot]$ bash testbench

Step 6:
    Verify correctness of all available benchmarks by running compare_cuda.sh and compare_opencl.sh in test-case/rodinia/:
    $ cd test-case/rodinia/
    $ bash ./compare_cuda.sh
    Executing above instructions compares the memory and kernel time of OpenACC-over-CUDA and CUDA versions.
    Similarily, compare OpenACC-over-OpenCL and OpenCL versions:
    $ bash ./compare_opencl.sh  
    
    Notice: these files rely on NVIDIA CUDA and NVIDIA OpenCL runtime.
    Notice: there are many configurable parameters in these scripts. Just look them up!

====================
Usage:
Type following command to see ipmacc usage:
$ ipmacc --help

summary:
$ [ipmacc-flags] ipmacc <c-file> [compile-flags]
    [ipmacc-flags]
        ta=<target> target: nvopencl or nvcuda
    <c-file>
        input OpenACC C/CPP file
    [compile-flags]
        nvcc/g++ flags

IPMACC translates OpenACC API (function calls or directives) in the input C-file to OpenCL/CUDA source. In case no compilation flag is passed, and if the compilation succeeds, two files will be generated:
    1) the translation destination OpenCL/CUDA/ISPC source file is created in the same path as the C-file, with the `_ipmacc.[cu/c/cpp/ispc]` suffix.
    2) a.out is generated in current directory


====================
Known issues:
-srcML, the parser which is used in IPMACC, has a compatibility issue with latest version of libxml2. We have included compatible version of libxml2 and libxslt in ipmacc (can be found under libxml2/) and integrated in the build.




